name: Test Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行完整测试套件
    - cron: '0 2 * * *'

jobs:
  test-environment-setup:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup test matrix
        id: matrix
        run: |
          echo "matrix={\"node\":[\"18\",\"20\"],\"os\":[\"ubuntu-latest\",\"windows-latest\",\"macos-latest\"]}" >> $GITHUB_OUTPUT

  unit-tests:
    needs: test-environment-setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.test-environment-setup.outputs.test-matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: |
          npm run test:unit -- --reporter=json --outputFile=test-results-${{ matrix.os }}-node${{ matrix.node }}.json
        continue-on-error: true
        
      - name: Generate test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        run: |
          npm run test:coverage -- --reporter=json-summary --reporter=lcov
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            test-results-*.json
            coverage/
          retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: |
          npm run test:integration || true
          
      - name: Run E2E tests with VSCode
        run: |
          # 安装VSCode测试环境
          npm install -g @vscode/test-electron
          # 运行VSCode集成测试
          npm run test:e2e || true

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance benchmarks
        run: |
          npm run test:performance || true
          
      - name: Memory leak detection
        run: |
          npm run test:memory-leaks || true
          
      - name: Load testing
        run: |
          npm run test:load || true

  code-quality-analysis:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-results.json || true
          
      - name: Run Prettier check
        run: |
          npm run format:check || true
          
      - name: TypeScript compilation check
        run: |
          npm run type-check || true
          
      - name: Dependency vulnerability scan
        run: |
          npm audit --json > security-audit.json || true
          
      - name: Bundle size analysis
        run: |
          npm run analyze:bundle || true

  test-coverage-analysis:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-ubuntu-latest-node20
          path: ./artifacts
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Merge coverage reports
        run: |
          node scripts/merge-coverage-reports.js
          
      - name: Coverage threshold check
        run: |
          node scripts/check-coverage-thresholds.js
          
      - name: Generate coverage badges
        run: |
          npm install -g coverage-badges-cli
          coverage-badges || true
          
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  test-report-generation:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, code-quality-analysis, test-coverage-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate comprehensive test report
        run: |
          node scripts/generate-test-report.js
          
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-comprehensive
          path: |
            reports/
            test-summary.html
            test-summary.json
          retention-days: 90
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testSummary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
            
            const comment = `
            ## 🧪 测试质量报告
            
            ### 单元测试结果
            - ✅ 通过: ${testSummary.unit.passed}
            - ❌ 失败: ${testSummary.unit.failed}  
            - 📊 覆盖率: ${testSummary.coverage.lines}%
            
            ### 集成测试结果  
            - ✅ 通过: ${testSummary.integration.passed}
            - ❌ 失败: ${testSummary.integration.failed}
            
            ### 性能测试结果
            - 🚀 内存使用: ${testSummary.performance.memory}MB
            - ⚡ 响应时间: ${testSummary.performance.responseTime}ms
            
            ### 代码质量
            - 🔍 ESLint问题: ${testSummary.quality.lintIssues}
            - 🛡️ 安全漏洞: ${testSummary.security.vulnerabilities}
            
            [查看完整报告](${testSummary.reportUrl})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  quality-gates:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, code-quality-analysis, test-coverage-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: ./quality-check
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run quality gates check
        run: |
          node scripts/quality-gates-check.js
          
      - name: Fail if quality gates not met
        run: |
          if [ -f "quality-gates-failed.flag" ]; then
            echo "❌ Quality gates not met!"
            cat quality-gates-report.txt
            exit 1
          else
            echo "✅ All quality gates passed!"
          fi

  nightly-full-test:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive test suite
        run: |
          # 运行所有测试，包括长时间运行的测试
          npm run test:all:comprehensive
          
      - name: Run compatibility tests
        run: |
          # 测试不同VSCode版本的兼容性
          npm run test:vscode-compatibility
          
      - name: Run stress tests
        run: |
          # 压力测试
          npm run test:stress
          
      - name: Generate nightly report
        run: |
          node scripts/generate-nightly-report.js
          
      - name: Send notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // 发送Slack/Email通知测试失败
            console.log('Nightly test failed - notification sent');

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript'
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: SARIF Upload
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: results.sarif