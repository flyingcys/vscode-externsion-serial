name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Package extension
      run: npx vsce package --no-dependencies
      
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: vscode-extension
        path: '*.vsix'
        
  e2e-test:
    needs: build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run E2E tests
      run: npm run test:e2e
      if: runner.os == 'Linux'
      
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: npx audit-ci --moderate
      
  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, build, e2e-test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download extension artifact
      uses: actions/download-artifact@v4
      with:
        name: vscode-extension
        
    - name: Determine version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      if: steps.version.outputs.version != '0.0.0'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          Automated release of Serial Studio VSCode Extension v${{ steps.version.outputs.version }}
          
          ## What's Changed
          - See commit history for detailed changes
          
          ## Installation
          Download the `.vsix` file and install using:
          ```
          code --install-extension serial-studio-vscode-${{ steps.version.outputs.version }}.vsix
          ```
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: steps.version.outputs.version != '0.0.0'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./serial-studio-vscode-${{ steps.version.outputs.version }}.vsix
        asset_name: serial-studio-vscode-${{ steps.version.outputs.version }}.vsix
        asset_content_type: application/zip
        
  publish:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[publish]')
    needs: [release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run package
      
    - name: Publish to VS Code Marketplace
      run: npx vsce publish --no-dependencies
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
        
    - name: Publish to Open VSX Registry
      run: npx ovsx publish --no-dependencies
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}